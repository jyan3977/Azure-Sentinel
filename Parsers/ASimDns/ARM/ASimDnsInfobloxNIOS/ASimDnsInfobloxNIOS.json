{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimDnsInfobloxNIOS",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "DNS activity ASIM parser for Infoblox NIOS",
            "category": "ASIM",
            "FunctionAlias": "ASimDnsInfobloxNIOS",
            "query": "let response = (disabled: boolean=false) {\n   Syslog\n   | where not(disabled)\n   | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\", \"response:\")\n   | parse SyslogMessage with\n       \"client \"\n       SrcIpAddr:string \"#\" \n       SrcPortNumber:int \" \"\n       NetworkProtocol:string \": query: \"\n       DnsQuery:string \" \"\n       DnsQueryClassName:string \" \"\n       DnsQueryTypeName:string \" \"\n       \"response: \"\n       rest_of_string:string\n   | extend\n       // -- multi-line mode (?m) needed in regex since samples included new lines. Might not exist in real logs\n       extract = extract_all(@\"^(\\w+) ([\\w\\+]+?)(?: |$)(?m)(.*?$)?\", rest_of_string)[0]\n   | extend \n       DnsResponseCodeName = tostring(extract[0]),\n       DnsFlags = tostring(extract[1]),\n       DnsResponseName = tostring(extract[2])\n   | extend \n       EventSubType = \"response\"\n   | project-away extract, rest_of_string,SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName\n };\n let request = (disabled: boolean=false) {\n   Syslog \n   | where not(disabled)\n   | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\") and SyslogMessage !has \"response:\"\n   // -- trim_start needed to remove optional @xxxx identifier.\n   | extend SyslogMessage = trim_start (@'^(?:[\\w\\: ]+)?client (?:@.*? )?', SyslogMessage)\n   // -- trim_end needed to remove optional repetative IP address at the end.\n   | extend SyslogMessage = trim_end (@' \\([\\d\\.]+\\)', SyslogMessage)\n   | extend SyslogMessage = replace_string (SyslogMessage, '\\\\ ', '@@@')\n   | parse SyslogMessage with\n       SrcIpAddr:string \"#\" \n       SrcPortNumber:int *\n       \"query: \"\n       DnsQuery:string \" \"\n       DnsQueryClassName:string \" \"\n       DnsQueryTypeName:string \" \"\n       DnsFlags:string\n   | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')\n   | extend \n       EventSubType = \"request\",\n       DnsResponseCodeName = \"NA\"\n   | project-away SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName\n };\n let parser = (disabled:boolean=false) {\n   union response (disabled), request (disabled)\n   | extend\n       EventCount=int(1),\n       EventStartTime=todatetime(TimeGenerated),\n       EventEndTime=todatetime(TimeGenerated),\n       EventProduct=\"NIOS\",\n       EventVendor=\"Infoblox\",\n       EventSchema=\"Dns\",\n       EventSchemaVersion=\"0.1.3\",\n       EventType=\"Query\", \n       EventResult=iff(EventSubType==\"request\" or DnsResponseCodeName==\"NOERROR\",\"Success\",\"Failure\"),\n       DvcIpAddr=iff (HostIP == \"Unknown IP\", \"\", HostIP)\n   // -- Aliases\n   | invoke _ASIM_ResolveDvcFQDN (\"Computer\")\n   | project-away Computer\n   | extend\n       Dvc=DvcHostname,\n       Domain=DnsQuery,\n       IpAddr=SrcIpAddr,\n       Src=SrcIpAddr,\n       EventResultDetails = DnsResponseCodeName\n   // -- Backward Compatibility\n   | extend\n       Query=DnsQuery,\n       QueryTypeName=DnsQueryTypeName,\n       ResponseCodeName=DnsResponseCodeName,\n       QueryClassName=DnsQueryClassName,\n       Flags=DnsFlags\n };\n parser (disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}