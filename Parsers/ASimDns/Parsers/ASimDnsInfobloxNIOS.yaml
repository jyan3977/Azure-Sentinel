Id: 678b6e84-0308-461c-ae43-6bb287a9d970
Parser:
  Title: DNS activity ASIM parser for Infoblox NIOS
  Version: '0.5'
  LastUpdated: June 26 2022
Product:
  Name: Infoblox NIOS
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Infoblox NIOS DNS logs to the ASIM Dns normalized schema.
ParserName: ASimDnsInfobloxNIOS
EquivalentBuiltInParser: _ASim_Dns_InfobloxNIOS
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
 let response = (disabled: boolean=false) {
    Syslog
    | where not(disabled)
    | where ProcessName == "named" and SyslogMessage has_all ("client", "query:", "response:")
    | parse SyslogMessage with
        "client "
        SrcIpAddr:string "#" 
        SrcPortNumber:int " "
        NetworkProtocol:string ": query: "
        DnsQuery:string " "
        DnsQueryClassName:string " "
        DnsQueryTypeName:string " "
        "response: "
        rest_of_string:string
    | extend
        // -- multi-line mode (?m) needed in regex since samples included new lines. Might not exist in real logs
        extract = extract_all(@"^(\w+) ([\w\+]+?)(?: |$)(?m)(.*?$)?", rest_of_string)[0]
    | extend 
        DnsResponseCodeName = tostring(extract[0]),
        DnsFlags = tostring(extract[1]),
        DnsResponseName = tostring(extract[2])
    | extend 
        EventSubType = "response"
    | project-away extract, rest_of_string,SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName
  };
  let request = (disabled: boolean=false) {
    Syslog 
    | where not(disabled)
    | where ProcessName == "named" and SyslogMessage has_all ("client", "query:") and SyslogMessage !has "response:"
    // -- trim_start needed to remove optional @xxxx identifier.
    | extend SyslogMessage = trim_start (@'^(?:[\w\: ]+)?client (?:@.*? )?', SyslogMessage)
    // -- trim_end needed to remove optional repetative IP address at the end.
    | extend SyslogMessage = trim_end (@' \([\d\.]+\)', SyslogMessage)
    | extend SyslogMessage = replace_string (SyslogMessage, '\\ ', '@@@')
    | parse SyslogMessage with
        SrcIpAddr:string "#" 
        SrcPortNumber:int *
        "query: "
        DnsQuery:string " "
        DnsQueryClassName:string " "
        DnsQueryTypeName:string " "
        DnsFlags:string
    | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')
    | extend 
        EventSubType = "request",
        DnsResponseCodeName = "NA"
    | project-away SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName
  };
  let parser = (disabled:boolean=false) {
    union response (disabled), request (disabled)
    | extend
        EventCount=int(1),
        EventStartTime=todatetime(TimeGenerated),
        EventEndTime=todatetime(TimeGenerated),
        EventProduct="NIOS",
        EventVendor="Infoblox",
        EventSchema="Dns",
        EventSchemaVersion="0.1.3",
        EventType="Query", 
        EventResult=iff(EventSubType=="request" or DnsResponseCodeName=="NOERROR","Success","Failure"),
        DvcIpAddr=iff (HostIP == "Unknown IP", "", HostIP)
    // -- Aliases
    | invoke _ASIM_ResolveDvcFQDN ("Computer")
    | project-away Computer
    | extend
        Dvc=DvcHostname,
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
        EventResultDetails = DnsResponseCodeName
    // -- Backward Compatibility
    | extend
        Query=DnsQuery,
        QueryTypeName=DnsQueryTypeName,
        ResponseCodeName=DnsResponseCodeName,
        QueryClassName=DnsQueryClassName,
        Flags=DnsFlags
  };
  parser (disabled)